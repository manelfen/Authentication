const express = require('express');
const bodyParser = require('body-parser');
const crypto = require('crypto');
const { Gateway, Wallets } = require('fabric-network');
const path = require('path');
const fs = require('fs');
const { ec: EC } = require('elliptic');
const forge = require('node-forge');
const ec = new EC('p256');
const https = require('https');
const app = express();
app.use(bodyParser.json());

/* ========== üìå VARIABLES GLOBALES (pour r√©utilisation) ========== */
const gatewayInstances = {}; // { reg1channel: { gateway, contract }, globalchannel: { gateway, contract } }
const MY_SERVER_ID = 'serverA';
/* ========== üìå FONCTIONS UTILES ========== */

// V√©rification de la signature locale
function verifySignature(message, certPem, signatureB64) {
    const cert = crypto.createPublicKey(certPem);
    const publicKeyJwk = cert.export({ format: 'jwk' });

    const x = Buffer.from(publicKeyJwk.x, 'base64');
    const y = Buffer.from(publicKeyJwk.y, 'base64');

    const pubKey = ec.keyFromPublic({ x: x.toString('hex'), y: y.toString('hex') });

    const hash = crypto.createHash('sha256').update(message).digest();
    const signature = Buffer.from(signatureB64, 'base64');

    if (signature.length !== 64) {
        throw new Error('Invalid signature length (must be 64 bytes)');
    }

    const r = signature.slice(0, 32);
    const s = signature.slice(32);

    return pubKey.verify(hash, { r: r.toString('hex'), s: s.toString('hex') });
}

// V√©rifie l'existence locale du device
function checkDeviceExistence(deviceId) {
    const certPath = path.join(__dirname, `fabric-ca-client/${deviceId}/msp/signcerts`);
    return fs.existsSync(certPath);
}

function checkUserExistence(userId) {
    const certPath = path.join(__dirname, `fabric-ca-client2/${userId}/msp/signcerts`);
    return fs.existsSync(certPath);
}

/* ========== ‚ö° INITIALISATION DES GATEWAY (au d√©marrage) ========== */

async function initGateway(channelName, contractName, instanceKey) {
    const wallet = await Wallets.newFileSystemWallet('./wallet');
    const gateway = new Gateway();

    const ccpPath = path.resolve(__dirname, 'connection-profile.json');
    const ccp = JSON.parse(fs.readFileSync(ccpPath, 'utf8'));

    await gateway.connect(ccp, { wallet, identity: 'admin-orgmain', discovery: { enabled: false, asLocalhost: true } });
    const network = await gateway.getNetwork(channelName);
    const contract = network.getContract(contractName);

    gatewayInstances[instanceKey] = { gateway, contract };
    console.log(`‚úÖ Gateway initialized for ${instanceKey} (${channelName})`);
}

/* ========== üü¢ AUTHENTIFICATION FONCTIONS (r√©utilisent instances) ========== */
async function getPeersByNames(network, namesArray) {
    const channel = network.getChannel();
    const allPeers = channel.getEndorsers();
    return allPeers.filter(p => namesArray.includes(p.name));
}

// Mise √† jour Local Authentication sur reg1channel
async function updateLocalAuth(deviceId, status, timestampLocal) {
    const { contract } = gatewayInstances['reg1'];
    const network = await gatewayInstances['reg1'].gateway.getNetwork('reg1channel');

    const tx = contract.createTransaction('SetLocalAuthenticated');

    const endorsingPeers = await getPeersByNames(network, [
        'peer0.orgmain','peer1.orgmain','peer2.orgmain']);
    tx.setEndorsingPeers(endorsingPeers);

    await tx.submit(deviceId, status.toString(),timestampLocal);
}
async function updateGlobalAuth(deviceId, status , timestamp) {
   const { contract } = gatewayInstances['global'];
    const network = await gatewayInstances['global'].gateway.getNetwork('globalchannel');

    const tx = contract.createTransaction('SetRegionalAuthenticated');

    const endorsingPeers = await getPeersByNames(network, [
        'peer2.orgmain',
        'peer5.orgmain'
    ]);
    tx.setEndorsingPeers(endorsingPeers);

    await tx.submit(deviceId, status.toString(), timestamp);
    }

// Authentification r√©gionale
async function authenticateRegional(deviceId, certPem, signatureB64, timestamp, serverID, edgeID, regionID) {
    const { contract } = gatewayInstances['reg1'];
    const network = await gatewayInstances['reg1'].gateway.getNetwork('reg1channel');

    const tx = contract.createTransaction('AuthenticateDeviceRegional');

    const endorsingPeers = await getPeersByNames(network, [
        'peer0.orgmain','peer1.orgmain','peer2.orgmain'
        ]);
    tx.setEndorsingPeers(endorsingPeers);

    console.log("üîç Envoi aux peers: ", tx.getTransactionId());

    const result = await tx.submit(deviceId, certPem, signatureB64, timestamp, serverID, edgeID, regionID);

    const resultString = result.toString();
    console.log("‚Ü©Ô∏è R√©sultat brut du smart contract:", resultString);

    let parsed;
    try {
        parsed = JSON.parse(resultString);
        if (Array.isArray(parsed) && parsed.length > 0) {
            parsed = parsed[0];
        }
    } catch (e) {
        parsed = { success: false, message: "R√©ponse non JSON: " + resultString };
    }

    return parsed;

}

// Authentification interr√©gionale
// Authentification interr√©gionale ‚Äî via peer2 uniquement
async function authenticateInterregional(deviceId, certPem, signatureB64, timestamp, serverID, edgeID, regionID) {
    const { contract, gateway } = gatewayInstances['global'];
    const network = await gateway.getNetwork('globalchannel');

    const tx = contract.createTransaction('AuthenticateDeviceInterregional');

    const endorsingPeers = await getPeersByNames(network, [
        'peer2.orgmain',
        'peer5.orgmain'
    ]);
    tx.setEndorsingPeers(endorsingPeers);

    try {
        const result = await tx.submit(deviceId, certPem, signatureB64, timestamp, serverID, edgeID, regionID);
        const resultString = result.toString();
        console.log("‚Ü©Ô∏è R√©sultat brut du smart contract (interregional):", resultString);

        let parsed;
        try {
            parsed = JSON.parse(resultString);
        } catch (e) {
            parsed = { success: false, message: "R√©ponse non JSON: " + resultString };
        }

        return parsed;

    } catch (err) {
        console.error("‚ùå Erreur lors de l'ex√©cution de la transaction interr√©gionale :", err.message);
        return { success: false, message: "√âchec de l'ex√©cution interr√©gionale : " + err.message };
    }
}

// üîß V√©rifie si le certificat du device est r√©voqu√©
function isRevoked(deviceId) {
    const data = JSON.parse(fs.readFileSync(path.join(__dirname, 'revoked.json')));
    return data.revoked.includes(deviceId);
}
function isRevokeduser(userId) {
    const data = JSON.parse(fs.readFileSync(path.join(__dirname, 'revoked.json')));
    return data.revoked.includes(userId);
}

function revokeDevice(deviceId) {
    const pathToFile = path.join(__dirname, 'revoked.json');
    const data = JSON.parse(fs.readFileSync(pathToFile));
    if (!data.revoked.includes(deviceId)) {
        data.revoked.push(deviceId);
        fs.writeFileSync(pathToFile, JSON.stringify(data, null, 2));
        console.log(`‚ùå Device ${deviceId} r√©voqu√©.`);
    }
}

function revokeuser(userId) {
    const pathToFile = path.join(__dirname, 'revoked.json');
    const data = JSON.parse(fs.readFileSync(pathToFile));
    if (!data.revoked.includes(userId)) {
        data.revoked.push(userId);
        fs.writeFileSync(pathToFile, JSON.stringify(data, null, 2));
        console.log(`‚ùå User ${userId} r√©voqu√©.`);
    }
}

// üîí V√©rifie si d√©j√† authentifi√© localement
function isAlreadyAuthenticated(deviceId) {
    const data = JSON.parse(fs.readFileSync(path.join(__dirname, 'authenticated.json')));
    return data.authenticated.includes(deviceId);
}

function isAlreadyAuthenticateduser(userId) {
    const data = JSON.parse(fs.readFileSync(path.join(__dirname, 'authenticated.json')));
    return data.authenticated.includes(userId);
}

function markAuthenticated(deviceId, timestampLocal) {
    const pathToFile = path.join(__dirname, 'authenticated.json');
    const data = fs.existsSync(pathToFile)
        ? JSON.parse(fs.readFileSync(pathToFile))
        : { devices: {} };

    if (!data.devices) data.devices = {};

    const now = Date.now();

    if (!data.devices[deviceId]) {
        // Premi√®re authentification
        data.devices[deviceId] = {
            timestampLocal,
            counter: 1
        };
        fs.writeFileSync(pathToFile, JSON.stringify(data, null, 2));
        console.log(`‚úÖ Device ${deviceId} authentifi√© pour la premi√®re fois.`);
        return { status: 'auth_ok' };
    }

    const current = parseInt(data.devices[deviceId].timestampLocal);

    if (now - current < 15 * 60 * 1000) {
        data.devices[deviceId].counter++;
        if (data.devices[deviceId].counter >= 4) {
            revokeDevice(deviceId);
            delete data.devices[deviceId];
            fs.writeFileSync(pathToFile, JSON.stringify(data, null, 2));
            console.log(`‚õî Device ${deviceId} r√©voqu√© apr√®s 4 tentatives.`);
            return { status: 'revoked' };
        }

        fs.writeFileSync(pathToFile, JSON.stringify(data, null, 2));
        console.log(`üîÅ Device ${deviceId} d√©j√† authentifi√© (${data.devices[deviceId].counter} tentatives).`);
        return { status: 'already_authenticated' };
    }

    // ‚ùó Timestamp expir√© ‚Üí suppression
    delete data.devices[deviceId];
    fs.writeFileSync(pathToFile, JSON.stringify(data, null, 2));
    console.log(`‚è±Ô∏è Timestamp expir√©. Device ${deviceId} supprim√© de authenticated.json.`);
    return { status: 'expired' };
}



function markAuthenticateduser(userId) {
    const pathToFile = path.join(__dirname, 'authenticated.json');
    const data = JSON.parse(fs.readFileSync(pathToFile));
    if (!data.authenticated.includes(userId)) {
        data.authenticated.push(userId);
        fs.writeFileSync(pathToFile, JSON.stringify(data, null, 2));
        console.log(`‚úÖ user ${userId} marqu√© comme authentifi√©.`);
    }
}

// üîé V√©rifie que le certificat re√ßu correspond √† celui stock√© localement
function isCertMatchingStored(deviceId, certPem) {
    const certPath = path.join(__dirname, `fabric-ca-client/${deviceId}/msp/signcerts`);
    if (!fs.existsSync(certPath)) return false;
    const files = fs.readdirSync(certPath);
    if (files.length === 0) return false;
    const storedCert = fs.readFileSync(path.join(certPath, files[0]), 'utf8');
    return storedCert === certPem;
}

function isCertMatchingStoreduser(userId, certPem) {
    const certPath = path.join(__dirname, `fabric-ca-client2/${userId}/msp/signcerts`);
    if (!fs.existsSync(certPath)) return false;
    const files = fs.readdirSync(certPath);
    if (files.length === 0) return false;
    const storedCert = fs.readFileSync(path.join(certPath, files[0]), 'utf8');
    return storedCert === certPem;
}

// üìÜ V√©rifie la validit√© temporelle du certificat

function verifyCertificateFields(certPem) {
    console.log("üì• D√©but de la v√©rification du certificat...");

    try {
        const x509 = new crypto.X509Certificate(certPem);

        console.log("üìÑ Certificat analys√© :");
        console.log(" - Subject :", x509.subject);
        console.log(" - Issuer  :", x509.issuer);
        console.log(" - Valid From :", x509.validFrom);
        console.log(" - Valid To   :", x509.validTo);

        const now = new Date();
        console.log("üïí Date actuelle :", now.toISOString());

        const notBefore = new Date(x509.validFrom);
        const notAfter = new Date(x509.validTo);

        if (now < notBefore || now > notAfter) {
            throw new Error(`Certificat expir√© ou non encore valide : ${notBefore} -> ${notAfter}`);
        }

        const caCertPath = path.join(__dirname, 'ca-cert.pem');
        if (!fs.existsSync(caCertPath)) {
            throw new Error(`Certificat du CA introuvable √† : ${caCertPath}`);
        }

        const caCertPem = fs.readFileSync(caCertPath, 'utf8');
        const caX509 = new crypto.X509Certificate(caCertPem);

        console.log("üîê Certificat CA charg√© avec succ√®s.");
        console.log(" - CA Subject :", caX509.subject);
        console.log(" - CA Issuer  :", caX509.issuer);

        if (x509.issuer !== caX509.subject) {
            throw new Error(`‚ùå L'issuer du certificat ne correspond pas au CA. Cert issuer: ${x509.issuer}`);
        }

        // üîç V√©rification de la signature du certificat avec la cl√© publique du CA
        const isVerified = x509.verify(caX509.publicKey);
        console.log(`üîê R√©sultat de la v√©rification de la signature : ${isVerified ? "‚úÖ OK" : "‚ùå √âchec"}`);

        if (!isVerified) {
            throw new Error("Signature invalide : le certificat n'a pas √©t√© sign√© par le CA.");
        }

        // ‚úÖ Extraction du CN
        const cnMatch = x509.subject.match(/CN=([^,\/]+)/);
        const cn = cnMatch ? cnMatch[1] : null;

        if (!cn) throw new Error("Impossible d'extraire le CN.");

        console.log("‚úî CN extrait :", cn);
        console.log("‚úÖ Device certificate verified successfuly.");

        return cn; // tu peux retourner le CN si besoin
    } catch (err) {
        console.error("‚ùå Error when verifying the certificate :", err.message);
        throw err;
    }
}
async function revokeDeviceEverywhere(deviceId) {
    // üîÅ R√©voque dans reg1channel (r√©gional)
    const contractReg1 = gatewayInstances['reg1'].contract;
    await contractReg1.submitTransaction('RevokeDevice', deviceId);

    // üåê R√©voque dans globalchannel (interr√©gional)
    const contractGlobal = gatewayInstances['global'].contract;
    await contractGlobal.submitTransaction('RevokeDevice', deviceId); // plus besoin de setEndorsingPeers
}

function isTimestampValid(timestamp) {
	const now = Date.now();
	const ts = parseInt(timestamp, 10);
	return Math.abs(now - ts) <= 5 * 60 * 1000; // 5 minutes de tol√©rance
}

/* ========== üöÄ ROUTE PRINCIPALE ========== */

app.post('/authenticate', async (req, res) => {
    const {
    deviceId,
    userId,
    certPem,
    signatureB64,
    timestamp,
    authType,
    serverID,
    edgeID,
    regionID
} = req.body;

if (serverID !== MY_SERVER_ID) {
    return res.status(403).json({
        success: false,
        code: 'INVALID_SERVER',
        message: `‚ùå Mauvais serverID. Re√ßu : ${serverID}, attendu : ${MY_SERVER_ID}`
    });
}
   let message = '';
let message2 = '';
    try {
      if (authType === 'local') {  message = deviceId + serverID + timestamp + certPem;
    // 1. Est-il r√©voqu√© ?
    if (isRevoked(deviceId)) {
        return res.status(200).json({
            success: false,
            code: 'REVOKED',
            message: `‚ùå Device revoked after 4 tentatives.`
        });
    }

    // 2. Le certificat existe-t-il ?
    if (!checkDeviceExistence(deviceId)) {
        return res.status(404).json({ error: '‚ùå Certificat not found' });
    }

    // 3. Est-ce qu‚Äôil est d√©j√† authentifi√© localement (timestamp local encore valide) ?
    const pathToFile = path.join(__dirname, 'authenticated.json');
    const data = fs.existsSync(pathToFile)
        ? JSON.parse(fs.readFileSync(pathToFile))
        : { devices: {} };

    const record = data.devices[deviceId];
    const now = Date.now();

   if (record) {
    const isStillValid = now - parseInt(record.timestampLocal) < 15 * 60 * 1000;

    if (isStillValid) {
        record.counter++;

        if (record.counter >= 4) {
            revokeDevice(deviceId);
            delete data.devices[deviceId];
            fs.writeFileSync(pathToFile, JSON.stringify(data, null, 2));
            return res.status(200).json({
                success: false,
                code: 'REVOKED',
                message: `‚ùå Device revoked after 4 tentatives.`
            });
        }

        fs.writeFileSync(pathToFile, JSON.stringify(data, null, 2));
        return res.status(200).json({
            success: true,
            code: 'ALREADY_AUTHENTICATED',
            message: `üîÅ Device ${deviceId} is already authenticated (${record.counter} tentative(s)).`
        });
    } else {
        // timestamp local expir√©
        delete data.devices[deviceId];
        fs.writeFileSync(pathToFile, JSON.stringify(data, null, 2));

        return res.status(200).json({
            success: false,
            code: 'SESSION_EXPIRED',
            message: `‚è±Ô∏è Session expir√©e pour ${deviceId}. Veuillez vous r√©authentifier localement.`
        });
    }
}


    // 4. Timestamp fourni par le client est-il valide ?
    if (!isTimestampValid(timestamp)) {
        revokeDevice(deviceId);
         return res.status(200).json({
            success: false,
            code: 'Timestamp',
            message: `‚è±Ô∏è Invalid timestamp.`
        });
    }

    // 5. V√©rifier le certificat (valide, sign√© par le bon CA)
    try {
       verifyCertificateFields(certPem);
    } catch (err) {
        revokeDevice(deviceId);
   //     await revokeDeviceEverywhere(deviceId);
         return res.status(200).json({
            success: false,
            code: 'invalid',
            message: `‚ùå INVALID certificat.`
        });
    }

    // 6. Est-ce que le certificat correspond √† celui stock√© ?
    if (!isCertMatchingStored(deviceId, certPem)) {
        revokeDevice(deviceId);
       // await revokeDeviceEverywhere(deviceId);
        return res.status(200).json({
            success: false,
            code: 'mismatched',
            message: `‚ùå Certificat mismatched.`
        });
    }

    // 7. V√©rification de la signature ECDSA
    const isValid = verifySignature(deviceId + certPem + timestamp + serverID, certPem, signatureB64);
    if (!isValid) { revokeDevice(deviceId);
        return res.status(200).json({
            success: false,
            code: 'sign',
            message: `‚ùå Invalid signature.`
        });
    }

    // ‚úÖ 8. Authentification r√©ussie ‚Äî maintenant on √©crit dans authenticated.json
    const timestampLocal = Date.now().toString();
    data.devices[deviceId] = {
        timestampLocal,
        counter: 1
    };
    fs.writeFileSync(pathToFile, JSON.stringify(data, null, 2));
    console.log(`‚úÖ Device ${deviceId} authentifi√© localement.`);

    res.status(200).json({
        success: true,
        code: 'OK',
        message: `‚úÖ Local authentication successful ${deviceId}`
    });

    // üîÅ Mise √† jour de la blockchain en arri√®re-plan
    setImmediate(async () => {
        try {
            await updateLocalAuth(deviceId, true, timestampLocal);
            console.log(`üîÑ Mise √† jour blockchain locale r√©ussie pour ${deviceId}`);
        } catch (err) {
            console.error(`‚ö†Ô∏è Erreur lors de la mise √† jour locale de ${deviceId} :`, err.message);
        }
    });
}


else if (authType === 'localuser') {
    message2 = userId + serverID + timestamp + certPem;

    // üõë 1. Revoked?
    if (isRevokeduser(userId)) {
        return res.status(403).json({
            success: false,
            code: 'REVOKED',
            error: `‚ùå User ${userId} has been revoked.`
        });
    }

    // üìÅ 2. Load authenticated.json
    const authPath = path.join(__dirname, 'authenticated.json');
    const data = fs.existsSync(authPath)
        ? JSON.parse(fs.readFileSync(authPath))
        : { devices: {}, users: {} };
    if (!data.users) data.users = {};

    const now = Date.now();

    // üîÅ 3. Already authenticated?
    if (data.users[userId]) {
        const authInfo = data.users[userId];
        const last = parseInt(authInfo.timestampLocal);

        const isStillValid = now - last < 15 * 60 * 1000;

        if (isStillValid) {
            authInfo.counter++;
            if (authInfo.counter >= 4) {
                revokeuser(userId);
                delete data.users[userId];
                fs.writeFileSync(authPath, JSON.stringify(data, null, 2));
                return res.status(403).json({
                    success: false,
                    code: 'REVOKED',
                    message: `‚õî User ${userId} has been revoked after 4 attempts.`
                });
            }

            fs.writeFileSync(authPath, JSON.stringify(data, null, 2));
            return res.status(200).json({
                success: true,
                code: 'ALREADY_AUTHENTICATED',
                message: `üîÅ User ${userId} is already authenticated (${authInfo.counter} attempt(s)).`
            });
        } else {
            // ‚è±Ô∏è Session expired ‚Üí delete and ask for re-auth
            delete data.users[userId];
            fs.writeFileSync(authPath, JSON.stringify(data, null, 2));

            return res.status(200).json({
                success: false,
                code: 'SESSION_EXPIRED',
                message: `‚è±Ô∏è Session expired for user ${userId}. Please re-authenticate locally.`
            });
        }
    }

    // üìÇ 4. Certificate exists?
    if (!checkUserExistence(userId)) {
        return res.status(404).json({ error: '‚ùå Certificate not found.' });
    }

    // üìÜ 5. Certificate valid?
    try {
        verifyCertificateFields(certPem);
    } catch (err) {
        revokeuser(userId);
       return res.status(200).json({
            success: false,
            code: 'cert',
            message: `‚ùå Invalid Certificate `
        });
    }

    // üßæ 6. Certificate matches stored one?
    if (!isCertMatchingStoreduser(userId, certPem)) {
        revokeuser(userId);
        return res.status(200).json({
            success: false,
            code: 'REVOKED',
            message: `‚ùå Certificate mismatched`
        });
    }

    // ‚è±Ô∏è 7. Timestamp valid?
    if (!isTimestampValid(timestamp)) {
        revokeuser(userId);
        return res.status(200).json({
            success: false,
            code: 'REVOKED',
            message: `‚ùå Invalid timestamp.`
        });
    }

    // ‚úçÔ∏è 8. Signature valid?
    const isValid = verifySignature(userId + certPem + timestamp + serverID, certPem, signatureB64);
    if (!isValid) {
        revokeuser(userId);
        return res.status(200).json({
            success: false,
            code: 'REVOKED',
            message: `‚ùå Invalid signature.`
        });
    }

    // ‚úÖ 9. Successful authentication ‚Äî save session
    const timestampLocal = Date.now().toString();
    data.users[userId] = {
        timestampLocal,
        counter: 1
    };
    fs.writeFileSync(authPath, JSON.stringify(data, null, 2));
    console.log(`‚úÖ User ${userId} successfully authenticated.`);

    return res.status(200).json({
        success: true,
        code: 'OK',
        message: `‚úÖ Local authentication successful for user ${userId}.`
    });
}

else if (authType === 'intraregional') {  message = deviceId + serverID + edgeID + regionID + timestamp + certPem;
    const result = await authenticateRegional(deviceId, certPem, signatureB64, timestamp, serverID , edgeID, regionID);
    res.json(result); 
    const regionalTimestamp = result.regionalAuthTimestamp;
    // renvoie exactement ce que retourne le smart contract
if (result.success === true || result.success === 'true' && result.RegionalAuthTimestamp) {

    setImmediate(async () => {
        try {
            await updateGlobalAuth(deviceId, true, regionalTimestamp );
            console.log(`üåç Mise √† jour globale de regionauth r√©ussie pour ${deviceId}`);
        } catch (err) {
            console.error(`‚ö†Ô∏è Erreur lors de la mise √† jour globale de regionauth pour ${deviceId} :`, err.message);
        }
    });
}

}
 else if (authType === 'interregional') {  message = deviceId + serverID + edgeID + regionID + timestamp + certPem;
           const result = await authenticateInterregional(deviceId, certPem, signatureB64, timestamp, serverID , edgeID, regionID);
            res.json(result);

        } else {
            res.status(400).json({ error: 'Invalid authentication type' });
        }

    } catch (error) {
        console.error('‚ùå Error during authentication:', error.message);
        res.status(500).json({ error: error.message });
    }
});

/* ========== üõë FERMETURE PROPRE DU SERVEUR (d√©connexion) ========== */
async function closeGateways() {
    for (const key of Object.keys(gatewayInstances)) {
        await gatewayInstances[key].gateway.disconnect();
        console.log(`üõë Gateway disconnected for ${key}`);
    }
}

/* ========== üöÄ LANCEMENT SERVEUR ========== */

const PORT = 7000;

// üîê Charger les certificats TLS
const sslOptions = {
    key: fs.readFileSync('ssl/device-key.pem'),
    cert: fs.readFileSync('ssl/device-cert.pem')
};

// üîê Cr√©er serveur HTTPS
const server = https.createServer(sslOptions, app);

async function startServer() {
    try {
        await initGateway('reg1channel', 'intraa', 'reg1');
        await initGateway('globalchannel', 'master', 'global');

        server.listen(PORT, () => {
            console.log(`üöÄ Server HTTPS listening on port ${PORT}`);
        });
    } catch (err) {
        console.error('‚ùå Failed to initialize gateways:', err);
        process.exit(1);
    }
}

console.log('üì¶ Script charg√©, d√©marrage du serveur HTTPS...');
startServer();

// üîÅ Shutdown propre
process.on('SIGINT', async () => {
    console.log('\nüõë Shutting down server...');
    await closeGateways();
    process.exit(0);
});



